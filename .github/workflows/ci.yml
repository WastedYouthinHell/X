name: CI
on:
  push:
    branches: [ master ]
    tags: "[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '6.0.100'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set Environment Variables
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0).$([[ $GITHUB_REF = refs/tags/* ]] && echo 0 || echo 65534)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Web
        run: ./bin/build --web-only

      - name: Dotnet
        run: ./bin/build --dotnet-only --version ${{ env.VERSION }}

      - name: Upload Static Web Content
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: web-${{ env.VERSION }}
          path: src/web/build
  
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        runtime:
          - "win-x64"
          - "win-arm"
          - "win-arm64"
          - "linux-x64"
          - "linux-arm"
          - "linux-arm64"
          - "linux-musl-x64"
          - "linux-musl-arm"
          - "linux-musl-arm64"
          - "osx-x64"
          - "osx-arm64"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set Environment Variables
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0).$([[ $GITHUB_REF = refs/tags/* ]] && echo 0 || echo 65534)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Download Static Web Content
        uses: actions/download-artifact@v2
        with:
          name: web-${{ env.VERSION }}
          path: src/slskd/wwwroot

      - name: Build ${{ matrix.runtime }}
        run: bin/publish --no-prebuild --runtime ${{ matrix.runtime }} --version ${{ env.VERSION }}

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: slskd-${{ env.VERSION }}-${{ matrix.runtime }}
          path: dist/${{ matrix.runtime }}
  
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set Environment Variables
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "VERSION=$(git describe --tags --abbrev=0).$([[ $GITHUB_REF = refs/tags/* ]] && echo 0 || echo 65534)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "REVISION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date --iso-8601=s)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Canary
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            TAG=${{ env.TAG }}
            VERSION=${{ env.VERSION }}
            REVISION=${{ env.REVISION }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          tags: |
            slskd/slskd:${{ env.VERSION }}
            slskd/slskd:canary
            ghcr.io/slskd/slskd:${{ env.VERSION }}
            ghcr.io/slskd/slskd:canary
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build and push Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            slskd/slskd:${{ env.VERSION }}
            slskd/slskd:${{ env.TAG }}
            slskd/slskd:canary
            slskd/slskd:latest
            ghcr.io/slskd/slskd:${{ env.VERSION }}
            ghcr.io/slskd/slskd:${{ env.TAG }}
            ghcr.io/slskd/slskd:canary
            ghcr.io/slskd/slskd:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        if: 
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [publish, docker]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        runtime:
          - "win-x64"
          - "win-arm"
          - "win-arm64"
          - "linux-x64"
          - "linux-arm"
          - "linux-arm64"
          - "linux-musl-x64"
          - "linux-musl-arm"
          - "linux-musl-arm64"
          - "osx-x64"
          - "osx-arm64"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set Environment Variables
        run: |
          echo "TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "VERSION=$(git describe --tags --abbrev=0).$([[ $GITHUB_REF = refs/tags/* ]] && echo 0 || echo 65534)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Download ${{ matrix.runtime }} Binaries
        uses: actions/download-artifact@v2
        with:
          name: slskd-${{ env.VERSION }}-${{ matrix.runtime }}
          path: dist/${{ matrix.runtime }}
      - name: Zip ${{ matrix.runtime }} Binaries
        run: |
          cd dist/${{ matrix.runtime }}
          if [ -f "slskd" ]; then
            chmod +x slskd
          fi
          zip -r ../../slskd-${{ env.TAG }}-${{ matrix.runtime }}.zip .
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            slskd-${{ env.TAG }}-${{ matrix.runtime }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
